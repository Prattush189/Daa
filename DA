DAA CODES:

1. FRACTIONAL KNAPSACK
#include<iostream>
using namespace std;
void fractional_knapsack(int num,float weight[],float profit[],int capacity)
{
	cout<<"in function";
	float x[20],total_profit=0;
	int i,j,W;
	W=capacity;
	for(i=0;i<num;i++)
	{
		x[i]=0.0;
	}
	for(i=0;i<num;i++)
	{
		if(weight[i]>W)
		{
			break;
		}
		else
		{
			x[i]=1.0;
			total_profit=total_profit+profit[i];
			W=W-weight[i];
		}
	}
	if(i<num)
	{
		x[i]=W/weight[i]; 
		total_profit=total_profit+(x[i]*profit[i]);
	}
	cout<<"the resultant vector is:=="<<endl;
	for(i=0;i<num;i++)
	{
		cout<<x[i]<<"\t";
	}
	cout<<"the total profit is:=="<<total_profit;
}
int main()
{
	float weight[20],profit[20];
	int num,i,j,capacity;
	float ratio[20],temp;
	cout<<"enter the number of objects"<<endl;
	cin>>num;
	cout<<"enter the weights and profit of each object"<<endl;
	for(i=0;i<num;i++)
	{
		cin>>weight[i];
		cin>>profit[i];
	}
	cout<<"enter the capacity of knapsack";
	cin>>capacity;
	for(i=0;i<num;i++)
	{
		ratio[i]=(profit[i]/weight[i]);
	}
	
	//Bubble sort
	for(i=0;i<num;i++)
	{
		for(j=i+1;j<num;j++)
		{
			if(ratio[i]<ratio[j])
			{
				temp=ratio[j];
				ratio[j]=ratio[i];
				ratio[i]=temp;
				
				temp=weight[j];
				weight[j]=weight[i];
				weight[i]=temp;
				
				temp=profit[j];
				profit[j]=profit[i];
				profit[i]=temp;
			}
		}
	}
	for(i=0;i<num;i++)
	{
		cout<<ratio[i];
	}
	fractional_knapsack(num,weight,profit,capacity);
	return 0;
}





2. ACTIVITY SELECTION
 #include<iostream>

#include <bits/stdc++.h>
using namespace std; 
#define N 6		// defines the number of activities

struct Activity 
{ 
    int start, finish; 
}; 

bool Sort_activity(Activity s1, Activity s2) 
{ 
    return (s1.finish< s2.finish); 
} 

void print_Max_Activities(Activity arr[], int n) 
{ 
    sort(arr, arr+n, Sort_activity); 

	cout<< "the selected activities are:= \n"; 

    // Select the first activity
    int i = 0; 
	cout<< "(" <<arr[i].start<< ", " <<arr[i].finish << ")\n"; 

    // Consider the remaining activities from 1 to n-1 
    for (int j = 1; j < n; j++) 
    { 
       	if (arr[j].start>= arr[i].finish) 
      	{	 
			cout<< "(" <<arr[j].start<< ", "<<arr[j].finish << ") \n"; 
			i = j; 
      	} 
    } 
} 


int main() 
{ 
    Activity arr[N];
	for(int i=0; i<=N-1; i++)
	{
		cout<<"Enter the start and findish time of "<<i+1<<" activity \n";
		cin>>arr[i].start>>arr[i].finish;
    }

	print_Max_Activities(arr, N); 
    return 0; 
}





3.MCM 
#include<iostream>
using namespace std;
int mini(int a, int b)
{
	return(a<b);
}
int MCM(int n,int a[])
{
	int len,row,col,k;
	int dp=new int[n][n];
	for(i=0;i<=n;i++)
	{
		for(j=0;j<=n;j++)
		{
			dp[i][j]=0;
		}
	}
	
	for(len=2;len<n;len++)
	{
		for(row=0,col=len;row<n-len;row++,col++)
		{
			dp[row][col]=INT_MAX;
			for(k=row+1;k<col;k++)
			{
				dp[row][col]=mini(dp[row][col],dp[row][k]+dp[k][col]+a[row]*a[k]*a[col]);
			}	
			
		}	
	}	
	return dp[0][n-1];
}
int main()
{
	cout<<"enter the number of matrix"<<endl;
	cin>>n;
	cout<<"enter the dimension of matrix";
	for(i=0;i<=n;i++)
	{
		cin>>a[i];
	}
	cout<<MCM(n,a);
	return 0;
}




4.AFTER MCM
#include<iostream>
using namespace std;
int m[10][10],s[10][10];
//void Matrix_Chain_Multiplication(int [],int);
void Matrix_Chain_Multiplication(int p[],int n)
{
	int  len=n;
	//cout<<endl<<"length is="<<len<<endl;
	int m[len][len],s[len][len];
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=n;j++)
		{
			m[i][j]=0;
			s[i][j]=0;
		}
				
	}
	for(int l=2;l<=n;l++)
	{  
		for(int i=1;i<=(n-l+1);i++)
		{
			int j=i+l-1;
			m[i][j]=INT_MAX;
			for(int k=i;k<=j-1;k++)
			{
				int q=m[i][k] + m[k+1][j] + p[i-1]*p[k]*p[j];
			//	cout<<endl<<"Q value is=="<<q;
				if(q<m[i][j])
				{
					m[i][j]=q;
					s[i][j]=k;
				}
				
			}
		}
		
	}
cout<<endl;
	for(int i=1;i<=n;i++)
	{
	
		for(int j=1;j<=n;j++)
		{
	
			cout<<m[i][j]<<"\t";	
		}
			cout<<endl;
	}
		
cout<<endl;
	cout<<"Minimum Scalar Multiplication sis:=="<<endl;
	cout<<m[1][n]<<endl;
	Print_Optimal_Parens(s[][4],1,4);
	for(int i=1;i<=n;i++)
	{
	
		for(int j=1;j<=n;j++)
		{
	
			cout<<s[i][j]<<"\t";	
		}
			cout<<endl;
				
	}
	
}
void Print_Optimal_Parens(int s[][4],int i,int j)
{
	if(i==j)
	{
		cout<<"A"<<i;
	}
	else
	{
		cout<<"(";
		Print_Optimal_Parens(s[][4],i,s[i][j]);
		Print_Optimal_Parens(s[][4],s[i][j]+1, j);
		cout<<")";
	}
}
int main()
{
	int p[10],n,i;
	cout<<"Enter the number of Matrices Multiplication"<<endl;
	cin>>n;
	for(i=0;i<=n;i++)
	{
		cin>>p[i];
	}
for(i=0;i<=n;i++)
	{
		cout<<p[i];
	}
		Matrix_Chain_Multiplication(p,n);
		cout<<endl<<cost;
//		Print_Optimal_Parens(s[][4],1,4)
		return 0;
}
